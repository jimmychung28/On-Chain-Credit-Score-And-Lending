import fs from "fs";
import path from "path";

// New clean contract addresses from our deployment
const CLEAN_CONTRACTS = {
  MockZKVerifier: "0x9DBb24B10502aD166c198Dbeb5AB54d2d13AfcFd",
  ZKCreditScoring: "0xF8b299F87EBb62E0b625eAF440B73Cc6b7717dbd",
  ZKCreditLending: "0xEb0fCBB68Ca7Ba175Dc1D3dABFD618e7a3F582F6",
};

async function generateCleanDeployedContracts() {
  console.log("üßπ Generating clean deployedContracts.ts with only ZK system...");

  // Read the current deployedContracts.ts to extract the ABIs
  const currentFile = path.join(__dirname, "../../nextjs/contracts/deployedContracts.ts");
  const currentContent = fs.readFileSync(currentFile, "utf8");

  // Extract the ZK contract ABIs from the current file
  const zkScoringMatch = currentContent.match(
    /ZKCreditScoring:\s*{[\s\S]*?abi:\s*(\[[\s\S]*?\]),[\s\S]*?inheritedFunctions:/,
  );
  const zkLendingMatch = currentContent.match(
    /ZKCreditLending:\s*{[\s\S]*?abi:\s*(\[[\s\S]*?\]),[\s\S]*?inheritedFunctions:/,
  );
  const mockVerifierMatch = currentContent.match(
    /MockZKVerifier:\s*{[\s\S]*?abi:\s*(\[[\s\S]*?\]),[\s\S]*?inheritedFunctions:/,
  );

  if (!zkScoringMatch || !zkLendingMatch || !mockVerifierMatch) {
    console.error("‚ùå Could not extract ABIs from current file");
    return;
  }

  const zkScoringAbi = zkScoringMatch[1];
  const zkLendingAbi = zkLendingMatch[1];
  const mockVerifierAbi = mockVerifierMatch[1];

  // Generate the clean file content
  const cleanContent = `/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  31337: {
    MockZKVerifier: {
      address: "${CLEAN_CONTRACTS.MockZKVerifier}",
      abi: ${mockVerifierAbi},
      inheritedFunctions: {},
    },
    ZKCreditScoring: {
      address: "${CLEAN_CONTRACTS.ZKCreditScoring}",
      abi: ${zkScoringAbi},
      inheritedFunctions: {
        owner: "@openzeppelin/contracts/access/Ownable.sol",
        renounceOwnership: "@openzeppelin/contracts/access/Ownable.sol",
        transferOwnership: "@openzeppelin/contracts/access/Ownable.sol",
      },
    },
    ZKCreditLending: {
      address: "${CLEAN_CONTRACTS.ZKCreditLending}",
      abi: ${zkLendingAbi},
      inheritedFunctions: {
        owner: "@openzeppelin/contracts/access/Ownable.sol",
        renounceOwnership: "@openzeppelin/contracts/access/Ownable.sol",
        transferOwnership: "@openzeppelin/contracts/access/Ownable.sol",
      },
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;`;

  // Write the clean file
  fs.writeFileSync(currentFile, cleanContent);

  console.log("‚úÖ Generated clean deployedContracts.ts with only ZK system contracts!");
  console.log("üìã Contracts included:");
  console.log("  - MockZKVerifier:", CLEAN_CONTRACTS.MockZKVerifier);
  console.log("  - ZKCreditScoring:", CLEAN_CONTRACTS.ZKCreditScoring);
  console.log("  - ZKCreditLending:", CLEAN_CONTRACTS.ZKCreditLending);
}

generateCleanDeployedContracts().catch(console.error);
