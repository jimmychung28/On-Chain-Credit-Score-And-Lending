import { ethers } from "hardhat";
import fs from "fs";
import path from "path";

async function main() {
  console.log("🚀 Deploying Enhanced ZK Credit System...");

  const [deployer] = await ethers.getSigners();
  console.log("Deploying contracts with account:", deployer.address);
  console.log("Account balance:", ethers.formatEther(await deployer.provider.getBalance(deployer.address)), "ETH");

  // 1. Deploy the Enhanced Mock ZK Verifier
  console.log("\n📋 Deploying Enhanced Mock ZK Verifier...");
  const MockZKVerifierV2 = await ethers.getContractFactory("MockZKVerifierV2");
  const mockZKVerifier = await MockZKVerifierV2.deploy();
  await mockZKVerifier.waitForDeployment();
  const mockZKVerifierAddress = await mockZKVerifier.getAddress();
  console.log("✅ MockZKVerifierV2 deployed to:", mockZKVerifierAddress);

  // 2. Deploy ZK Credit Scoring with the enhanced verifier
  console.log("\n📊 Deploying ZK Credit Scoring...");
  const ZKCreditScoring = await ethers.getContractFactory("ZKCreditScoring");
  const zkCreditScoring = await ZKCreditScoring.deploy(mockZKVerifierAddress);
  await zkCreditScoring.waitForDeployment();
  const zkCreditScoringAddress = await zkCreditScoring.getAddress();
  console.log("✅ ZKCreditScoring deployed to:", zkCreditScoringAddress);

  // 3. Deploy Dynamic Rate Model
  console.log("\n📈 Deploying Dynamic Rate Model...");
  const DynamicTargetRateModel = await ethers.getContractFactory("DynamicTargetRateModel");
  const rateModel = await DynamicTargetRateModel.deploy();
  await rateModel.waitForDeployment();
  const rateModelAddress = await rateModel.getAddress();
  console.log("✅ DynamicTargetRateModel deployed to:", rateModelAddress);

  // 4. Deploy ZK Credit Lending
  console.log("\n💰 Deploying ZK Credit Lending...");
  const ZKCreditLending = await ethers.getContractFactory("ZKCreditLending");
  const zkCreditLending = await ZKCreditLending.deploy(zkCreditScoringAddress, rateModelAddress);
  await zkCreditLending.waitForDeployment();
  const zkCreditLendingAddress = await zkCreditLending.getAddress();
  console.log("✅ ZKCreditLending deployed to:", zkCreditLendingAddress);

  // 5. Configure the contracts
  console.log("\n⚙️  Configuring contracts...");

  // Add lending contract as verified address in scoring contract
  const addVerifiedTx = await zkCreditScoring.addVerifiedAddress(zkCreditLendingAddress);
  await addVerifiedTx.wait();
  console.log("✅ Added lending contract as verified address");

  // 6. Add initial liquidity to the lending pool
  console.log("\n💧 Adding initial liquidity...");
  const liquidityAmount = ethers.parseEther("10"); // 10 ETH
  const addLiquidityTx = await zkCreditLending.stakeETH({ value: liquidityAmount });
  await addLiquidityTx.wait();
  console.log("✅ Added", ethers.formatEther(liquidityAmount), "ETH liquidity");

  // 7. Verify deployment
  console.log("\n🔍 Verifying deployment...");
  const poolInfo = await zkCreditLending.getPoolInfo();
  console.log("Pool total funds:", ethers.formatEther(poolInfo[0]), "ETH");
  console.log("Pool available funds:", ethers.formatEther(poolInfo[1]), "ETH");
  console.log("Pool utilization:", poolInfo[2].toString(), "%");

  // 8. Test Enhanced ZK verifier
  console.log("\n🧪 Testing Enhanced ZK verifier...");
  try {
    // Test the built-in test function
    const testResult = await (mockZKVerifier as any).testVerification();
    console.log("✅ Built-in test result:", testResult);

    // Test with custom proof data
    const mockProof = "0x" + "12".repeat(128); // 256 bytes of 0x12
    const mockSignals: [bigint, bigint, bigint, bigint] = [1n, 750n, 100n, 12345n];

    const verifyResult = await (mockZKVerifier as any).verifyProof(mockProof, mockSignals);
    console.log("✅ Custom proof verification result:", verifyResult);

    // Get verifier info
    const verifierInfo = await (mockZKVerifier as any).getVerificationInfo();
    console.log("📋 Verifier info:", {
      algorithm: verifierInfo[0],
      curve: verifierInfo[1],
      proofSize: verifierInfo[2].toString(),
      signalCount: verifierInfo[3].toString(),
    });
  } catch (error) {
    console.log("⚠️  ZK verifier test failed:", (error as Error).message);
  }

  console.log("\n🎉 Deployment Summary:");
  console.log("==========================================");
  console.log("MockZKVerifierV2:      ", mockZKVerifierAddress);
  console.log("DynamicTargetRateModel:", rateModelAddress);
  console.log("ZKCreditScoring:       ", zkCreditScoringAddress);
  console.log("ZKCreditLending:       ", zkCreditLendingAddress);
  console.log("==========================================");

  // 9. Generate new deployedContracts.ts
  console.log("\n📝 Generating clean deployedContracts.ts...");

  const deployedContractsContent = `/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
 export const deployedContracts = {
   31337: {
     MockZKVerifierV2: {
       address: "${mockZKVerifierAddress}",
       abi: ${JSON.stringify((await ethers.getContractFactory("MockZKVerifierV2")).interface.formatJson(), null, 6)},
       inheritedFunctions: {},
     },
     DynamicTargetRateModel: {
       address: "${rateModelAddress}",
       abi: ${JSON.stringify((await ethers.getContractFactory("DynamicTargetRateModel")).interface.formatJson(), null, 6)},
       inheritedFunctions: {},
     },
     ZKCreditScoring: {
       address: "${zkCreditScoringAddress}",
       abi: ${JSON.stringify((await ethers.getContractFactory("ZKCreditScoring")).interface.formatJson(), null, 6)},
       inheritedFunctions: {},
     },
     ZKCreditLending: {
       address: "${zkCreditLendingAddress}",
       abi: ${JSON.stringify((await ethers.getContractFactory("ZKCreditLending")).interface.formatJson(), null, 6)},
       inheritedFunctions: {},
     },
   },
 } as const;

export default deployedContracts;
`;

  // Write to deployedContracts.ts
  const contractsPath = path.join(__dirname, "../../nextjs/contracts/deployedContracts.ts");
  fs.writeFileSync(contractsPath, deployedContractsContent);
  console.log("✅ Updated deployedContracts.ts");

  console.log("\n🔐 Enhanced ZK Credit System deployed successfully!");
  console.log("🌐 Frontend available at: http://localhost:3000");
  console.log("🔍 Debug contracts at: http://localhost:3000/debug");

  // 10. Test a complete ZK workflow
  console.log("\n🔄 Testing complete ZK workflow...");
  try {
    // Register a test user
    const registerTx = await zkCreditScoring.registerUser();
    await registerTx.wait();
    console.log("✅ Test user registered");

    // Submit a ZK proof
    const testProof = "0x" + "ab".repeat(128);
    const testSignals: [bigint, bigint, bigint] = [750n, BigInt(Math.floor(Date.now() / 1000)), 12345n];
    const testCommitment = ethers.keccak256(ethers.toUtf8Bytes("test_commitment"));

    const submitTx = await zkCreditScoring.submitCreditProof(
      testProof,
      testSignals,
      testCommitment,
      1000000n, // totalVolume
      50n, // transactionCount
      5n, // loanCount
      5n, // repaidLoans
      0n, // defaultedLoans
    );
    await submitTx.wait();
    console.log("✅ ZK proof submitted successfully");

    // Check user profile
    const profile = await zkCreditScoring.getCreditProfile(deployer.address);
    console.log("👤 User profile:", {
      score: profile[0].toString(),
      lastUpdated: new Date(Number(profile[1]) * 1000).toISOString(),
      isActive: profile[2],
      privacyLevel: profile[3].toString(),
      isVerified: profile[4],
    });
  } catch (error) {
    console.log("⚠️  Workflow test failed:", (error as Error).message);
  }
}

main()
  .then(() => process.exit(0))
  .catch(error => {
    console.error("❌ Deployment failed:", error);
    process.exit(1);
  });
