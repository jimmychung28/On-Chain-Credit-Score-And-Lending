import { ethers } from "hardhat";
import fs from "fs";
import path from "path";

async function main() {
  console.log("🚀 Deploying ZK Credit System with Real Verifier...");

  const [deployer] = await ethers.getSigners();
  console.log("Deploying contracts with account:", deployer.address);
  console.log("Account balance:", ethers.formatEther(await deployer.provider.getBalance(deployer.address)), "ETH");

  // 1. Deploy the Groth16 Verifier
  console.log("\n📋 Deploying Groth16 Verifier...");
  const Groth16Verifier = await ethers.getContractFactory("Groth16Verifier");
  const groth16Verifier = await Groth16Verifier.deploy();
  await groth16Verifier.waitForDeployment();
  const groth16VerifierAddress = await groth16Verifier.getAddress();
  console.log("✅ Groth16Verifier deployed to:", groth16VerifierAddress);

  // 2. Deploy ZK Credit Scoring with the real verifier
  console.log("\n📊 Deploying ZK Credit Scoring...");
  const ZKCreditScoring = await ethers.getContractFactory("ZKCreditScoring");
  const zkCreditScoring = await ZKCreditScoring.deploy(groth16VerifierAddress);
  await zkCreditScoring.waitForDeployment();
  const zkCreditScoringAddress = await zkCreditScoring.getAddress();
  console.log("✅ ZKCreditScoring deployed to:", zkCreditScoringAddress);

  // 3. Deploy ZK Credit Lending
  console.log("\n💰 Deploying ZK Credit Lending...");
  const ZKCreditLending = await ethers.getContractFactory("ZKCreditLending");
  const zkCreditLending = await ZKCreditLending.deploy(zkCreditScoringAddress);
  await zkCreditLending.waitForDeployment();
  const zkCreditLendingAddress = await zkCreditLending.getAddress();
  console.log("✅ ZKCreditLending deployed to:", zkCreditLendingAddress);

  // 4. Configure the contracts
  console.log("\n⚙️  Configuring contracts...");

  // Add lending contract as verified address in scoring contract
  const addVerifiedTx = await zkCreditScoring.addVerifiedAddress(zkCreditLendingAddress);
  await addVerifiedTx.wait();
  console.log("✅ Added lending contract as verified address");

  // 5. Add initial liquidity to the lending pool
  console.log("\n💧 Adding initial liquidity...");
  const liquidityAmount = ethers.parseEther("10"); // 10 ETH
  const addLiquidityTx = await zkCreditLending.stakeETH({ value: liquidityAmount });
  await addLiquidityTx.wait();
  console.log("✅ Added", ethers.formatEther(liquidityAmount), "ETH liquidity");

  // 6. Verify deployment
  console.log("\n🔍 Verifying deployment...");
  const poolInfo = await zkCreditLending.getPoolInfo();
  console.log("Pool total funds:", ethers.formatEther(poolInfo[0]), "ETH");
  console.log("Pool available funds:", ethers.formatEther(poolInfo[1]), "ETH");
  console.log("Pool utilization:", poolInfo[2].toString(), "%");

  // 7. Test ZK verifier
  console.log("\n🧪 Testing ZK verifier...");
  try {
    // Test with mock proof data
    const mockProof = "0x" + "00".repeat(256); // 256 bytes of zeros
    const mockSignals = [1n, 750n, 0n, 12345n]; // [score_in_range, masked_score, privacy_premium, nullifier]

    const verifyResult = await (groth16Verifier as any).verifyProof(mockProof, mockSignals);
    console.log("✅ ZK verifier test result:", verifyResult);
  } catch (error) {
    console.log("⚠️  ZK verifier test failed (expected in mock mode):", (error as Error).message);
  }

  console.log("\n🎉 Deployment Summary:");
  console.log("==========================================");
  console.log("Groth16Verifier:   ", groth16VerifierAddress);
  console.log("ZKCreditScoring:   ", zkCreditScoringAddress);
  console.log("ZKCreditLending:   ", zkCreditLendingAddress);
  console.log("==========================================");

  // 8. Generate new deployedContracts.ts
  console.log("\n📝 Generating clean deployedContracts.ts...");

  const deployedContractsContent = `/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
export const deployedContracts = {
  31337: {
    Groth16Verifier: {
      address: "${groth16VerifierAddress}",
      abi: ${JSON.stringify((await ethers.getContractFactory("Groth16Verifier")).interface.formatJson(), null, 6)},
      inheritedFunctions: {},
    },
    ZKCreditScoring: {
      address: "${zkCreditScoringAddress}",
      abi: ${JSON.stringify((await ethers.getContractFactory("ZKCreditScoring")).interface.formatJson(), null, 6)},
      inheritedFunctions: {},
    },
    ZKCreditLending: {
      address: "${zkCreditLendingAddress}",
      abi: ${JSON.stringify((await ethers.getContractFactory("ZKCreditLending")).interface.formatJson(), null, 6)},
      inheritedFunctions: {},
    },
  },
} as const;

export default deployedContracts;
`;

  // Write to deployedContracts.ts
  const contractsPath = path.join(__dirname, "../../nextjs/contracts/deployedContracts.ts");
  fs.writeFileSync(contractsPath, deployedContractsContent);
  console.log("✅ Updated deployedContracts.ts");

  console.log("\n🔐 ZK Credit System with Real Verifier deployed successfully!");
  console.log("🌐 Frontend available at: http://localhost:3000");
  console.log("🔍 Debug contracts at: http://localhost:3000/debug");
}

main()
  .then(() => process.exit(0))
  .catch(error => {
    console.error("❌ Deployment failed:", error);
    process.exit(1);
  });
