"use client";

import React, { useMemo, useRef } from "react";
import { Center, Float, PointMaterial, Points, Text3D } from "@react-three/drei";
import { Canvas, useFrame } from "@react-three/fiber";
// import * as THREE from "three";

// Floating blockchain network nodes
function BlockchainNodes({ count = 5000 }) {
  const ref = useRef<any>(null);
  const [sphere] = useMemo(() => {
    const positions = new Float32Array(count * 3);
    // Create a spherical distribution of points
    for (let i = 0; i < count; i++) {
      const x = (Math.random() - 0.5) * 20;
      const y = (Math.random() - 0.5) * 20;
      const z = (Math.random() - 0.5) * 20;
      positions[i * 3] = x;
      positions[i * 3 + 1] = y;
      positions[i * 3 + 2] = z;
    }
    return [positions];
  }, [count]);

  useFrame((state, delta) => {
    if (ref.current) {
      ref.current.rotation.x -= delta / 10;
      ref.current.rotation.y -= delta / 15;
    }
  });

  return (
    <group rotation={[0, 0, Math.PI / 4]}>
      <Points ref={ref} positions={sphere} stride={3} frustumCulled={false}>
        <PointMaterial transparent color="#3b82f6" size={0.005} sizeAttenuation={true} depthWrite={false} />
      </Points>
    </group>
  );
}

// Floating credit score visualization
function FloatingCreditScore() {
  const groupRef = useRef<any>(null);

  useFrame(state => {
    if (groupRef.current) {
      groupRef.current.rotation.y = Math.sin(state.clock.elapsedTime * 0.5) * 0.1;
      groupRef.current.position.y = Math.sin(state.clock.elapsedTime * 0.3) * 0.2;
    }
  });

  return (
    <Float speed={1.5} rotationIntensity={0.2} floatIntensity={0.3}>
      <group ref={groupRef} position={[2, 0, -2]}>
        <Center>
          <mesh>
            <boxGeometry args={[2, 2, 0.2]} />
            <meshStandardMaterial color="#10b981" transparent opacity={0.8} />
          </mesh>
          <Text3D font="/fonts/helvetiker_regular.typeface.json" size={0.3} height={0.1} position={[-0.5, -0.1, 0.1]}>
            750
            <meshStandardMaterial color="#ffffff" />
          </Text3D>
          <Text3D font="/fonts/helvetiker_regular.typeface.json" size={0.1} height={0.05} position={[-0.3, -0.4, 0.1]}>
            Credit Score
            <meshStandardMaterial color="#ffffff" />
          </Text3D>
        </Center>
      </group>
    </Float>
  );
}

// Animated privacy shield
function PrivacyShield() {
  const shieldRef = useRef<any>(null);

  useFrame(state => {
    if (shieldRef.current) {
      shieldRef.current.rotation.z = Math.sin(state.clock.elapsedTime * 2) * 0.1;
      shieldRef.current.scale.setScalar(1 + Math.sin(state.clock.elapsedTime * 3) * 0.05);
    }
  });

  return (
    <Float speed={2} rotationIntensity={0.1} floatIntensity={0.4}>
      <group ref={shieldRef} position={[-2, 0, -1]}>
        <mesh>
          {/* Shield shape */}
          <cylinderGeometry args={[1, 0.7, 0.3, 6]} />
          <meshStandardMaterial color="#8b5cf6" transparent opacity={0.7} emissive="#4c1d95" emissiveIntensity={0.2} />
        </mesh>
        <Center>
          <Text3D font="/fonts/helvetiker_regular.typeface.json" size={0.2} height={0.05} position={[-0.1, 0, 0.2]}>
            üîê
            <meshStandardMaterial color="#ffffff" />
          </Text3D>
        </Center>
      </group>
    </Float>
  );
}

// Floating DeFi tokens
function DeFiTokens() {
  const tokens = [
    { symbol: "ETH", color: "#627eea", position: [-3, 2, 0] },
    { symbol: "BTC", color: "#f7931a", position: [3, -1, 1] },
    { symbol: "UNI", color: "#ff007a", position: [0, 2, -2] },
    { symbol: "AAVE", color: "#2ebac6", position: [-1, -2, 1] },
  ];

  return (
    <>
      {tokens.map((token, index) => (
        <Float key={index} speed={1 + index * 0.2} rotationIntensity={0.3} floatIntensity={0.5}>
          <group position={token.position}>
            <mesh>
              <cylinderGeometry args={[0.3, 0.3, 0.1, 8]} />
              <meshStandardMaterial color={token.color} transparent opacity={0.8} metalness={0.5} roughness={0.2} />
            </mesh>
            <Center>
              <Text3D
                font="/fonts/helvetiker_regular.typeface.json"
                size={0.08}
                height={0.02}
                position={[-0.1, 0, 0.06]}
              >
                {token.symbol}
                <meshStandardMaterial color="#ffffff" />
              </Text3D>
            </Center>
          </group>
        </Float>
      ))}
    </>
  );
}

// Main Three.js Scene
export function ThreeJSScene() {
  return (
    <div className="fixed inset-0 -z-10">
      <Canvas camera={{ position: [0, 0, 8], fov: 60 }} gl={{ alpha: true, antialias: true }}>
        {/* Lighting */}
        <ambientLight intensity={0.4} />
        <pointLight position={[10, 10, 10]} intensity={1} />
        <pointLight position={[-10, -10, -10]} intensity={0.5} color="#3b82f6" />

        {/* Animated elements */}
        <BlockchainNodes />
        <FloatingCreditScore />
        <PrivacyShield />
        <DeFiTokens />

        {/* Background fog */}
        <fog attach="fog" args={["#1f2937", 5, 20]} />
      </Canvas>
    </div>
  );
}
